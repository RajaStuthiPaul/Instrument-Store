openapi: 3.0.0
info:
  version: 1.0.0
  title: Instrument Store API
  description: A simple API to do CRUD on users, instruments, orders resources in Instrument Store.

servers:
  - url: http://localhost:5000/

tags:
  - name: User
    description: API to manage the users.
  - name: Drum
    description: API to manage the drum instrument.
  - name: Guitar
    description: API to manage the guitar instrument.
  - name: Harmonium
    description: API to manage the harmonium instrument.
  - name: Keyboard
    description: API to manage the keyboard instrument.
  - name: Musicbook
    description: API to manage the musicbook instrument.
  - name: Login
    description: API to verify tokens when user logs in.
  - name: Search
    description: API to manage the search of instruments.

paths:
  /users:
    get:
      summary: Lists all the users
      tags: [User]
      responses:
        "200":
          description: The list of users.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    post:
      summary: Creates an user Object .
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Created Successfully.
  /users/{userID}:
    get:
      summary: Returns an user Object by ID.
      tags: [User]
      parameters:
        - name: userID
          in: path
          required: true
          description: Autogenerated User ID by MongoDB
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    patch:
      tags: [User]
      summary: Updated user
      description: updates the user object.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      produces:
        - "application/json"
      parameters:
        - name: userID
          in: path
          description: ID of the user object that needs to be updated
          required: true
          type: string
      responses:
        "400":
          description: Invalid user ID supplied
        "404":
          description: User not found
    delete:
      tags: [User]
      summary: Delete user
      description: deletes an user object
      produces:
        - "application/json"
      parameters:
        - name: userID
          in: path
          description: The object ID that needs to be deleted
          required: true
          type: string
      responses:
        "400":
          description: Invalid user ID supplied
        "404":
          description: User not found
  /drum:
    get:
      summary: Lists all the guitars
      tags: [Drum]
      responses:
        "200":
          description: The list of drums.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Drum"
    post:
      summary: Creates a Drum Object.
      tags: [Drum]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Drum"
      responses:
        "201":
          description: Created Successfully.
  /drum/{drumID}:
    get:
      summary: Returns a drum Object by ID.
      tags: [Drum]
      parameters:
        - name: drumID
          in: path
          required: true
          description: Autogenerated Drum ID by MongoDB
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Drum"
    patch:
      tags: [Drum]
      summary: Updated Drum object
      description: updates the drum object
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Drum"
      produces:
        - "application/json"
      parameters:
        - name: drumID
          in: path
          description: object that needs to be updated
          required: true
          type: string
      responses:
        "400":
          description: Invalid drum ID supplied
        "404":
          description: drum not found
    delete:
      tags: [Drum]
      summary: Delete drum
      description: deletes the drum object
      produces:
        - "application/json"
      parameters:
        - name: drumID
          in: path
          description: The object ID that needs to be deleted
          required: true
          type: string
      responses:
        "400":
          description: Invalid drum ID supplied
        "404":
          description: drum not found
  /guitar:
    get:
      summary: Lists all the guitars
      tags: [Guitar]
      responses:
        "200":
          description: The list of guitars.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Guitar"
    post:
      summary: Creates a Guitar Object.
      tags: [Guitar]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Guitar"
      responses:
        "201":
          description: Created Successfully.
  /guitar/{guitarID}:
    get:
      summary: Returns a guitar Object by ID.
      tags: [Guitar]
      parameters:
        - name: guitarID
          in: path
          required: true
          description: Autogenerated Guitar ID by MongoDB
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Guitar"
    patch:
      tags: [Guitar]
      summary: Updated Guitar object
      description: updates the guitar object
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Guitar"
      produces:
        - "application/json"
      parameters:
        - name: guitarID
          in: path
          description: object that needs to be updated
          required: true
          type: string
      responses:
        "400":
          description: Invalid guitar ID supplied
        "404":
          description: guitar not found
    delete:
      tags: [Guitar]
      summary: Delete guitar
      description: deletes the guitar object
      produces:
        - "application/json"
      parameters:
        - name: guitarID
          in: path
          description: The object ID that needs to be deleted
          required: true
          type: string
      responses:
        "400":
          description: Invalid guitar ID supplied
        "404":
          description: guitar not found
  /harmonium:
    get:
      summary: Lists all the harmoniums
      tags: [Harmonium]
      responses:
        "200":
          description: The list of harmoniums.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Harmonium"
    post:
      summary: Creates a Harmonium Object.
      tags: [Harmonium]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Harmonium"
      responses:
        "201":
          description: Created Successfully.
  /harmonium/{harmoniumID}:
    get:
      summary: Returns a harmonium Object by ID.
      tags: [Harmonium]
      parameters:
        - name: harmoniumID
          in: path
          required: true
          description: Autogenerated harmonium ID by MongoDB
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Harmonium"
    patch:
      tags: [Harmonium]
      summary: Updated harmonium object
      description: updates the harmonium object
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Harmonium"
      produces:
        - "application/json"
      parameters:
        - name: harmoniumID
          in: path
          description: object that needs to be updated
          required: true
          type: string
      responses:
        "400":
          description: Invalid harmonium ID supplied
        "404":
          description: harmonium not found
    delete:
      tags: [Harmonium]
      summary: Delete harmonium
      description: deletes the harmonium object
      produces:
        - "application/json"
      parameters:
        - name: harmoniumID
          in: path
          description: The object ID that needs to be deleted
          required: true
          type: string
      responses:
        "400":
          description: Invalid harmonium ID supplied
        "404":
          description: harmonium not found
  /keyboard:
    get:
      summary: Lists all the keyboards
      tags: [Keyboard]
      responses:
        "200":
          description: The list of keyboards.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Keyboard"
    post:
      summary: Creates a Keyboard Object.
      tags: [Keyboard]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Keyboard"
      responses:
        "201":
          description: Created Successfully.
  /keyboard/{keyboardID}:
    get:
      summary: Returns a keyboard Object by ID.
      tags: [Keyboard]
      parameters:
        - name: keyboardID
          in: path
          required: true
          description: Autogenerated keyboard ID by MongoDB
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Keyboard"
    patch:
      tags: [Keyboard]
      summary: Updated keyboard object
      description: updates the keyboard object
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Keyboard"
      produces:
        - "application/json"
      parameters:
        - name: keyboardID
          in: path
          description: object that needs to be updated
          required: true
          type: string
      responses:
        "400":
          description: Invalid keyboard ID supplied
        "404":
          description: keyboard not found
    delete:
      tags: [Keyboard]
      summary: Delete keyboard
      description: deletes the keyboard object
      produces:
        - "application/json"
      parameters:
        - name: keyboardID
          in: path
          description: The object ID that needs to be deleted
          required: true
          type: string
      responses:
        "400":
          description: Invalid keyboard ID supplied
        "404":
          description: keyboard not found
  /musicbook:
    get:
      summary: Lists all the musicbooks
      tags: [Musicbook]
      responses:
        "200":
          description: The list of musicbooks.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Musicbook"
    post:
      summary: Creates a Musicbook Object.
      tags: [Musicbook]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Musicbook"
      responses:
        "201":
          description: Created Successfully.
  /musicbook/{musicbookID}:
    get:
      summary: Returns a musicbook Object by ID.
      tags: [Musicbook]
      parameters:
        - name: musicbookID
          in: path
          required: true
          description: Autogenerated musicbook ID by MongoDB
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Musicbook"
    patch:
      tags: [Musicbook]
      summary: Updated Musicbook object
      description: updates the musicbook object
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Musicbook"
      produces:
        - "application/json"
      parameters:
        - name: musicbookID
          in: path
          description: object that needs to be updated
          required: true
          type: string
      responses:
        "400":
          description: Invalid musicbook ID supplied
        "404":
          description: musicbook not found
    delete:
      tags: [Musicbook]
      summary: Delete musicbook
      description: deletes the musicbook object
      produces:
        - "application/json"
      parameters:
        - name: musicbookID
          in: path
          description: The object ID that needs to be deleted
          required: true
          type: string
      responses:
        "400":
          description: Invalid musicbook ID supplied
        "404":
          description: musicbook not found
  /login:
    post:
      tags: [Login]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "201":
          description: Logged In Successfully.
  /search/drum:
    get:
      tags: [Search]
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          required: true
        - in: query
          required: true
          name: name
          schema:
            type: string
          description: the name of the instrument 
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Search"
    

components:
  schemas:
    User:
      type: object
      required:
        - username
        - password
        - firstname
        - lastname
      properties:
        id:
          type: integer
          description: The auto-generated id of the student.
        username:
          type: string
          description: The name of the user.
        password:
          type: string
          description: The password of the user
        firstname:
          type: string
          description: The firstname of the user
        lastname:
          type: string
          description: The lastname of the user
        orders:
          type: string
          description: The orders made by the user.
      example:
        username: RSP
        password: b123
        firstname: Stuthi
        lastname: Paul

    Drum:
      type: object
      required:
        - name
        - price
        - link
      properties:
        id:
          type: integer
          description: The auto-generated id of the book.
        name:
          type: string
          description: The name of the drum instrument.
        price:
          type: string
          description: The price of the drum instrument.
        link:
          type: string
          description: The link of the drum of the instrument.
      example:
        name: Powerpak G3001A Electronic Drum Pad
        price: 3,822.00
        link: pics/images/d1.jpg

    Guitar:
      type: object
      required:
        - name
        - price
        - link
      properties:
        id:
          type: integer
          description: The auto-generated id of the guitar
        name:
          type: string
          description: The name of the guitar instrument.
        price:
          type: string
          description: The price of the guitar instrument.
        link:
          type: string
          description: The link of the image of guitar instrument.
      example:
        name: Kadence Guitar Acoustica Series
        price: 5,999.00
        link: pics/images/g1.jpg

    Harmonium:
      type: object
      required:
        - name
        - price
        - link
      properties:
        id:
          type: integer
          description: The auto-generated id of the harmonium
        name:
          type: string
          description: The name of the harmonium instrument.
        price:
          type: string
          description: The price of the harmonium instrument.
        link:
          type: string
          description: The link of the image of harmonium instrument.
      example:
        name: Harmonium for Beginner/Student
        price: 5,390.00
        link: pics/images/h2.jpg

    Keyboard:
      type: object
      required:
        - name
        - price
        - link
      properties:
        id:
          type: integer
          description: The auto-generated id of the Keyboard
        name:
          type: string
          description: The name of the Keyboard instrument.
        price:
          type: string
          description: The price of the Keyboard instrument.
        link:
          type: string
          description: The link of the image of Keyboard instrument.
      example:
        name: YAMAHA PSR-I500 PORTABLE KEYBOARD WITH ADAPTOR
        price: 20,113.00
        link: pics/images/k1.jpg

    Musicbook:
      type: object
      required:
        - name
        - price
        - link
      properties:
        id:
          type: integer
          description: The auto-generated id of the Musicbook
        name:
          type: string
          description: The name of the Musicbook instrument.
        price:
          type: string
          description: The price of the Musicbook instrument.
        link:
          type: string
          description: The link of the image of Musicbook instrument.
      example:
        name: Complete Book of Scales, Chords, Arpeggios & Cadences
        price: 1,020.00
        link: pics/images/b1.jpg
    
    Login:
      type: object
      required:
        - username
        - password
        - firstname
        - lastname
      properties:
        username:
          type: string
          description: The name of the user.
        password:
          type: string
          description: The password of the user
        firstname:
          type: string
          description: The firstname of the user
        lastname:
          type: string
          description: The lastname of the user

    Search: